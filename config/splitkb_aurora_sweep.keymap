/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt DE_N1 DE_X         &mt DE_N2 DE_V          &mt DE_N3 DE_L   &mt DE_N4 DE_C  &mt DE_N5 DE_W    &mt DE_N6 DE_K  &mt DE_N7 DE_H  &mt DE_N8 DE_G      &mt DE_N9 DE_F  &mt DE_N0 DE_Q
&kp DE_U               &hm LCTRL DE_I          &hm LALT DE_A    &hm LGUI DE_E   &kp DE_O          &kp DE_S        &hm RGUI DE_N   &hm RALT DE_R       &hm LCTRL DE_T  &kp DE_D
&mt LSHFT DE_U_UMLAUT  &kp DE_O_UMLAUT         &kp DE_A_UMLAUT  &kp DE_P        &kp DE_Z          &kp DE_B        &kp DE_M        &mt DE_COMMA DE_SZ  &mt DOT DE_Y    &mt RSHFT DE_J
&sk LSHIFT             &mt LC(LS(LALT)) SPACE                                                                                                         &mt RCTRL RET   &to 1
            >;
        };

        left_layer {
            bindings = <
&kp LA(DOT)         &kp DE_UNDER            &kp LA(DE_N5)       &kp RA(DE_N6)       &kp DE_LESS_THAN    &kp EXCL      &kp LT              &kp LT              &kp DE_EQUAL        &kp DE_AMPS
&kp LS(LA(DE_N7))   &hm LCTRL KP_SLASH      &hm LALT LA(DE_N8)  &hm LGUI LA(DE_N9)  &kp DE_STAR         &kp DE_QMARK  &hm RGUI LS(DE_N8)  &hm RALT LS(DE_N9)  &hm RCTRL DE_MINUS  &kp LS(DE_PERIOD)
&mt LSHIFT DE_HASH  &kp DE_DLLR             &kp PIPE            &kp DE_TILDE        &kp DE_GRAVE        &kp DE_PLUS   &kp DE_PRCNT        &kp DE_DQT          &kp DE_SQT          &mt RSHFT LS(DE_COMMA)
&to 0               &mt LC(LS(LALT)) SPACE                                                                                                                    &mt RCTRL RET       &to 2
            >;
        };

        right_layer {
            bindings = <
&kp PG_UP             &kp BSPC              &kp UP              &kp DEL               &kp PG_DN                 &kp LA(E)   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9      &kp MINUS
&kp HOME              &kp LEFT              &kp DOWN            &kp RIGHT             &kp END                   &kp DOLLAR  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6      &kp PLUS
&mt C_AC_UNDO K_UNDO  &mt C_AC_REDO K_REDO  &mt C_AC_CUT K_CUT  &mt C_AC_COPY K_COPY  &mt C_AC_PASTE K_PASTE    &kp CARET   &kp KP_NUMBER_1  &kp KP_N2        &kp KP_N3            &mt RSHFT DE_COMMA
&to 0                 &trans                                                                                                                                  &mt RET KP_NUMBER_0  &to 3
            >;
        };

        tri_layer {
            bindings = <
&trans      &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans      &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &bt BT_NXT  &bt BT_PRV  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&to 0       &trans                                                            &trans  &to 3
            >;
        };
    };
};
